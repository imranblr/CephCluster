#!/usr/bin/python3
from classes.node import node
import json
import os
import time
import copy



ssh_conf_file = os.getcwd() + "/ssh_config_file"
ceph_deploy_master = os.getcwd() + "\ceph-deploy-master.tar"

create_file = """
cat << EOM | sudo tee @@@LOC@@@
@@@VARIABLE@@@
EOM
"""

network_config_file = """
cat << EOM | sudo tee  /etc/netplan/@@@INTERFACE@@@.yaml
# Generated by VMWare customization engine.
network:
  version: 2
  renderer: networkd
  ethernets:
    ens160:
      dhcp4: no
      dhcp6: no
      addresses:
        - @@@IP-ADDRESS@@/24
      gateway4: @@@GATEWAY@@@
      nameservers:
        search:
        - ceph.ops.ssb.local
        - green.org
        - ssb.local
        addresses:
        - 100.50.50.1
        - 100.60.50.1
        - 100.201.10.1
        - 100.10.110.1
EOM
"""


config = None
try:
 with open("nodes.config.json") as f:
    config = json.loads(f.read())
except:
 print("Configuration file is missing")
 exit(1)  

UpDateConfigFileWhenFinished = False

config_backUp = copy.deepcopy(config)

primaryDataCenterIsSet = False
primary_dc_name = ""
for datacenter in config:
    # break
    dc_name = datacenter['datacenter_name']
    print("Datancenter Named: %s will be assumed to be the master datacenter" % dc_name)
    if not primaryDataCenterIsSet:
        primary_dc_name = dc_name
        primaryDataCenterIsSet = True
    dc_domain = datacenter['domain']

    nodes = datacenter['nodes']
    totalMonServers = 0
    totalOSDServers = 0
    totalRGWServers = 0
    mon_servers = ""
    mon_nodes = []
    osd_servers = ""
    osd_nodes = []
    rgw_servers = ""
    rgw_nodes = []
    for n in nodes:
        if n['Server'] == "mon":
            totalMonServers += 1
            mon_nodes.append(n['hostname'])
            mon_servers += n['hostname'] + " "
        elif n['Server'] == "osd":
            totalOSDServers += 1
            osd_nodes.append(n['hostname'])
            osd_servers += n['hostname'] + " "
        elif n['Server'] == "rgw":
            totalRGWServers += 1
            rgw_nodes.append(n['hostname'])
            rgw_servers += n['hostname'] + " "

    if totalMonServers < 3:
        print("Invalid number of mon nodes, minimum 3")
        exit(1)
    elif totalOSDServers < 3:
        print("Invalid number of osd nodes, minimum 3, recommened 5")
        exit(1)      
    def ssh_connect(hostname, username, password):
        # for n in nodes:
        try:
            if n['ssh_password']:
                newNode = node(hostname, n['ssh_port'], username, password=password)
            elif n['ssh_keyfile']:
                newNode = node(n['ip_address'], n['ssh_port'], username, password=os.getcwd() + "/" + n['ssh_keyfile'])
            print("Connecting to Node: %s --> " % n['hostname'], end='')
            if newNode.Connect():
                n['node_client'] = newNode
        except:
            print("Connection to Node: %s Failed " % n['hostname'])
    # exit(1)

    
    print("\nSetting up servers..\n")
    if datacenter['dns'] == "host-file":
        for n in nodes:
            ssh_connect(n['ip_address'], n['ssh_username'], n['ssh_password'])
            n0de = n['node_client']
            n0de.ExecCommand("sudo sed -i '$ a #The Ceph Servers' /etc/hosts", True)
            for m in nodes:
                n0de.ExecCommand("sudo sed -i '$ a %s   %s' /etc/hosts" % (m['ip_address'], m['hostname']), True)
        
    for n in nodes:
        ssh_connect(n['ip_address'], n['ssh_username'], n['ssh_password'])
        n0de = n['node_client']
        # print("Connecting the Node: %s " % n['hostname'])

        hostname_config = str(create_file)
        hostname_config = hostname_config.replace("@@@LOC@@@", "/etc/hostname")
        hostname_config = hostname_config.replace("@@@VARIABLE@@@", n['hostname'])
        n0de.ExecCommand("sudo %s" % hostname_config, True)

        network_config = str(network_config_file)
        network_config = network_config.replace("@@@INTERFACE@@@", n['ethernet_interface_name'])
        network_config = network_config.replace("@@@IP-ADDRESS@@", n['ip_address'])
        network_config = network_config.replace("@@@GATEWAY@@@", datacenter['gateway'])
        n0de.ExecCommand(f"sudo find /etc/netplan/ -type f -name '*.yaml' -exec mv {{}} {{}}.bck \;", True)
        n0de.ExecCommand("sudo %s" % network_config, True)
        
        n0de.ExecCommand("sudo cp /etc/apt/sources.list /etc/apt/sources.list.bck", True)
        n0de.ExecCommand("sudo sed -i '/ceph/d' /etc/apt/sources.list", True)
        

        apt_source = str("'$ a deb [trusted=yes arch=amd64] https://apt.green.org/download.ceph.com/debian-@@@CEPH-VERSION@@@/ @@@OS-VERSION@@@ main' /etc/apt/sources.list")
        apt_source = apt_source.replace("@@@CEPH-VERSION@@@", datacenter['ceph-version']) 
        apt_source = apt_source.replace("@@@OS-VERSION@@@", datacenter['os-version'])
        n0de.ExecCommand("sudo sed -i %s" % apt_source, True)
        
        n0de.ExecCommand("sudo apt update && sudo apt upgrade -y", True)
        n0de.ExecCommand("sudo apt install -y ntp net-tools", True)

        if n['hostname'] == "admin":
            n0de.ExecCommand("sudo apt-get install -y python3 python3-virtualenv", True)
            n0de.ExecCommand("sudo apt install -y pip", True)
            # n0de.ExecCommand("sudo pip install remoto -i https://pypi.green.org/", True)

            n0de.ExecCommand("mkdir ~/.pip")
            n0de.ExecCommand("echo $'[global]\nindex-url=https://pypi.green.org/' > ~/.pip/pip.conf")
            n0de.ExecCommand("sudo pip install remoto", True)
            n0de.SendFile(ceph_deploy_master, "ceph-deploy-master.tar")
            n0de.ExecCommand("sudo tar -xvf ceph-deploy-master.tar", True)
            # n0de.ExecCommand("sudo chmod +x ~/ceph-deploy-master/bootstrap", True)
            n0de.ExecCommand("sudo sh -c 'cd /home/ubuntu/ceph-deploy-master && sudo ./bootstrap 3'", True)
            # n0de.ExecCommand("sudo chmod +x ~/ceph-deploy-master/ceph-deploy", True)
            n0de.ExecCommand("sudo ln -s ~/ceph-deploy-master/ceph-deploy /usr/bin/ceph-deploy", True) 
            n0de.ExecCommand("ceph-deploy --version")
            
        print("Restarting the Node: %s " % n['hostname'])
        n0de.ExecCommand("sudo reboot", True, 30)
    print("Waiting for all servers to come back up online...")
    time.sleep(30)
    # ssh_connect(n['ssh_username'], n['ssh_password'])
    all_hostnames = []
    all_ceph_nodes = []
    all_ip_addresses = []
    ssh_config = ""
    for n in nodes:
        all_ip_addresses.append(n['ip_address'])
        all_hostnames.append(n['hostname'])
        if n['hostname'] != "admin":
            n0de = n['node_client']
            ssh_config += "Host " + n['hostname'] + "\n"
            ssh_config += "  Hostname " + n['hostname'] + "\n"
            ssh_config += "  User "+ datacenter['ceph-cluster-user'] + "\n"
            all_ceph_nodes.append(n['hostname'])
 
    with open('ssh_config_file', 'w') as ssh_conf:
        ssh_conf.write(ssh_config)
    
    for n in nodes:
        ssh_connect(n['ip_address'], n['ssh_username'], n['ssh_password'])
        n0de = n['node_client']
        # userget = "getent passwd @@@CLUSTER-USER@@@"
        # userget = userget.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
        # user_exist = n0de.ExecCommand("sudo %s" % userget, True)

        # if user_exist['retval'] != 0:
            # print("user --> %s doesn't exist in node --> %s. Creating user now!" % (datacenter['ceph-cluster-user'], n['hostname']))
        # try:
        print("Creating user --> %s in the node --> %s" % (datacenter['ceph-cluster-user'], n['hostname']))
        useradd = "useradd -m -s /bin/bash @@@CLUSTER-USER@@@"
        useradd = str(useradd)
        useradd = useradd.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
        n0de.ExecCommand("sudo %s" % useradd, True)
        # except:
        #     print("user --> %s already exists in node --> %s. Skipping user creation!" % (datacenter['ceph-cluster-user'], n['hostname']))
        userpass = str("echo '@@@CLUSTER-USER@@@:@@@CLUSTER-PASS@@@' | sudo chpasswd")
        userpass = userpass.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
        userpass = userpass.replace("@@@CLUSTER-PASS@@@", datacenter['ceph-cluster-pass'])
        chpasswd_status = n0de.ExecCommand("sudo %s" % userpass, True)
            # i = 3
            # while i != 0:
            #     chpasswd_status = n0de.ExecCommand("sudo %s" % userpass, True)
            #     i-=1
            # if chpasswd_status['retval'] != 0:
            #     print("The password resetting failed on %s after 3 attempts" % n['hostname'])

        usersudo = str("echo '@@@CLUSTER-USER@@@ ALL = (root) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/@@@CLUSTER-USER@@@")
        usersudo = usersudo.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
        n0de.ExecCommand("sudo %s" % usersudo, True)

        userfile = str("chmod 0440 /etc/sudoers.d/@@@CLUSTER-USER@@@")
        userfile = userfile.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
        n0de.ExecCommand("sudo %s" % userfile, True)
        # else: 
        #     print("user --> %s exists in node --> %s. Skipping user creation!" % (datacenter['ceph-cluster-user'], n['hostname']))
        
        if n['hostname'] == "admin":
            usercmd = "ls /home/@@@CLUSTER-USER@@@/.ssh/id_rsa"
            usercmd = usercmd.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
            rsa_exist = n0de.ExecCommand("sudo %s" % usercmd, True)
            # print("The rsa id status is --> ", rsa_exist['retval'])
            # exit(1)
            if rsa_exist['retval'] != 0:
                usercmd = "runuser -l @@@CLUSTER-USER@@@ -c 'ssh-keygen -t rsa -q -N \"\" -f \"/home/@@@CLUSTER-USER@@@/.ssh/id_rsa\"'"
                usercmd = str(usercmd)
                usercmd = usercmd.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
                # print("The rsa command is -> ", usercmd)
                n0de.ExecCommand("sudo %s" % usercmd, True)
            # else:    
 
                # ssh_status = n0de.ExecCommand("sudo %s" % ssh_config, True)
                # print("The status of ssh_config is --> ", ssh_status)
                ssh_loc = "/home/" + datacenter['ceph-cluster-user'] + "/.ssh/config"
                chown_file = "chown " + datacenter['ceph-cluster-user'] + ":" + datacenter['ceph-cluster-user'] + " "
                n0de.SendFile(ssh_conf_file, "config")
                n0de.ExecCommand("sudo mv config %s" % str(ssh_loc), True)
                n0de.ExecCommand("sudo %s %s" % (str(chown_file), str(ssh_loc)), True)
                n0de.ExecCommand("sudo apt -y install sshpass", True)

                for hostname in all_hostnames:
                    if hostname != n['hostname']:
                        print("Need to copy ssh id to : ", hostname, "\n")
                        usercmd = "runuser -l @@@CLUSTER-USER@@@ -c 'sshpass -p @@@CLUSTER-PASS@@@ ssh-copy-id -f -o StrictHostKeyChecking=no @@@CLUSTER-USER@@@@@@@HOSTNAME@@@'"
                        usercmd = usercmd.replace("@@@CLUSTER-USER@@@", datacenter['ceph-cluster-user'])
                        usercmd = usercmd.replace("@@@CLUSTER-PASS@@@", datacenter['ceph-cluster-pass'])
                        usercmd = usercmd.replace("@@@HOSTNAME@@@", str(hostname))
                        # print(usercmd)
                        # n0de.ExecCommand("sudo %s" % usercmd, True)
                        ssh_copy_id_status = n0de.ExecCommand("sudo %s" % usercmd, True)
                        print(hostname, "-->", ssh_copy_id_status)
                        # i = 3
                        # while i != 0:
                        #     ssh_copy_id_status = n0de.ExecCommand("sudo %s" % usercmd, True)
                        #     i-=1
                        # if ssh_copy_id_status != 0:
                        #     print("The ssh-copy-id failed on %s after 3 attempts" % hostname)
    print("Connecting to Ceph Nodes with Cluster User --> %s" % datacenter['ceph-cluster-user'])
        

    for n in nodes:
        if n['hostname'] == "admin":
            ssh_connect(n['ip_address'], datacenter['ceph-cluster-user'], datacenter['ceph-cluster-pass'])
            n0de = n['node_client']

            cmd = "runuser -l " + datacenter['ceph-cluster-user'] + " -c 'for i in"
            for j in all_hostnames:
                if j != "admin":
                    cmd += " "
                    cmd += j
            cmd += "; do ssh $i hostname; done'"
            cmd_status = n0de.ExecCommand("sudo %s" % str(cmd), True)
            if cmd_status['err']:
                print("Passwordless Connection from node admin to all the ceph nodes did not go through! Please check passwordless access config! ")
                exit(1)
            n0de.ExecCommand("mkdir ~/%s-ceph-deploy" % datacenter['datacenter_name'])

            print("Initializing Monitor Nodes...")
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy new %s'" % (datacenter['datacenter_name'], mon_servers))
            if cmd_status['retval'] != 0:
                print("Ceph Monitor Nodes initialization failed with the following errors: \n\n\n")
                print(cmd_status['err'])
                break
            else:
                print("Successfully Executed Command -> ceph-deploy new <mon_node01> <mon_node02> ...<mon_nodeXX>")
        
            print("Installing Ceph Packages on all Ceph Nodes...")
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy install %s'" % (datacenter['datacenter_name'], ' '.join([n for n in all_ceph_nodes])), False, 420)
            if cmd_status['retval'] != 0:
                print("Ceph Package installation failed with the following errors: \n\n\n")
                print(cmd_status['err'])
                break
            else:
                print("Ceph Pakages were installed Successfully by executing the command -> ceph-deploy install <ceph_node01> <ceph_node02> ...<ceph_nodeXX>")
            
            print("Deploying the initial monitors and gathering keys...\n\n")
            
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy --overwrite-conf mon create-initial'" % datacenter['datacenter_name'])
            if cmd_status['retval'] != 0:
                print("Initializing Monitor nodes failed with the following errors: \n\n")
                print(cmd_status['err'])
                break
            else:
                print("Initialized Ceph Monitor nodes Successfully by executing the command -> ceph-deploy mon create-initial")
            
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy --overwrite-conf mgr create %s'" % (datacenter['datacenter_name'], mon_servers))
            if cmd_status['retval'] != 0:
                print("Initializing Manager nodes failed with the following errors: \n\n\n")
                print(cmd_status['err'])
                break
            else:
                print("Initialized Ceph Manager nodes Successfully by executing the command -> ceph-deploy mgr create <mon_node01> <mon_node02> ...<mon_nodeXX>")
           
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy --overwrite-conf mds create %s'" % (datacenter['datacenter_name'], mon_servers))
            if cmd_status['retval'] != 0:
                print("Initializing MDS nodes failed with the following errors: \n\n\n")
                print(cmd_status['err'])
                break
            else:
                print("Initialized Ceph MDS nodes Successfully by executing the command -> ceph-deploy mds create <mon_node01> <mon_node02> ...<mon_nodeXX>")
                    
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy --overwrite-conf admin %s'" % (datacenter['datacenter_name'], ' '.join(n for n in all_ceph_nodes if 'rgw' not in n)))
            if cmd_status['retval'] != 0:
                print("Copying Ceph Admin Keys failed with the following errors: \n\n\n")
                print(cmd_status['err'])
                break
            else:
                print("Copying Ceph Admin Keys Successfull by executing the command -> ceph-deploy admin create <ceph_node01> <ceph_node02> ...<ceph_nodeXX>")

            for osd in osd_nodes:
                disks = datacenter['osd_disk']
                for disk in disks:
                    
                    cmd_status = n0de.ExecCommand("printf $(ssh %s lsblk | awk '{print $1}' | grep -o %s)" %(osd, disk))
                    if cmd_status['retval'] == 2:
                        print("The disk %s is not available to the server %s. \nPlease rescan the disks and try! \n" %(disk.upper(), osd.upper()))
                        continue
                    
                    cmd_status = n0de.ExecCommand("printf $(ssh %s lsblk | awk '/%s/ {print $7}')" %(osd, disk))
                    if cmd_status['retval'] == 0:
                        print("The disk %s is mounted in the server %s at %s. \nPlease unmount the disk and delete the partitions to try again! \n" %(disk.upper(), osd.upper(), cmd_status['out']))
                        continue

                    cmd_output = n0de.ExecCommand("printf $(ssh %s sudo ceph-volume lvm list | grep devices | grep -o %s)" %(osd, disk))
                    element = ' '.join(elem for elem in cmd_output['out'])
                    if element != disk:
                        # print("The disk is not a Ceph OSD")
                        cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy osd create --data /dev/%s %s'" %(datacenter['datacenter_name'], disk, osd))
                        if cmd_status['retval'] != 0:
                            print("OSD disk creation on Server %s failed with the following errors: \n\n\n" % osd.upper())
                            print(cmd_status['err'])
                            break
                        else:
                            print("Created OSD disk -> %s on Ceph Node -> %s\n" % (disk.upper(), osd.upper()))
                    else:
                        print("The disk %s is already a Ceph OSD\n" % disk.upper())
            for rgw in rgw_nodes:
                rgw_node = rgw
                break
            cmd_status = n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy --overwrite-conf rgw create %s'" % (datacenter['datacenter_name'], rgw_servers), False, 180)
            if cmd_status['retval'] != 0:
                print("Creating Rados Gateway Server failed with the following errors: \n\n\n")
                print(cmd_status['err'])
                break
            else:
                print("Created RADOS Gateway Server -> ceph-deploy rgw create <ceph_rgw01> <ceph_rgw02> ...<ceph_rgwXX>")
                n0de.ExecCommand("sh -c 'cd ~/%s-ceph-deploy && ceph-deploy --overwrite-conf admin %s'" % (datacenter['datacenter_name'], rgw_servers))
                rados_admin_cmd = "\"radosgw-admin user create --uid=admin --display-name='Ceph Admin' --access-key='@@@ACCESS-KEY@@@' --secret='@@@SECRET-KEY@@@' --system\""
                rados_admin_cmd = str(rados_admin_cmd)
                rados_admin_cmd = rados_admin_cmd.replace("@@@ACCESS-KEY@@@", datacenter['rgw_access_key'])
                rados_admin_cmd = rados_admin_cmd.replace("@@@SECRET-KEY@@@", datacenter['rgw_secret_key'])
                n0de.ExecCommand("ssh %s sudo %s" % (rgw_node, rados_admin_cmd))
                print("Created Admin user account for RADOS Gateway")
        
    mon_once = 1
    # rgw_once = 1
    for n in nodes:
        if n['Server'] == "mon":
            ssh_connect(n['ip_address'], datacenter['ceph-cluster-user'], datacenter['ceph-cluster-pass'])
            n0de = n['node_client']
            n0de.ExecCommand("sudo apt install -y ceph-mgr-dashboard", True)
            if mon_once == 1:
                n0de.ExecCommand("sudo ceph mgr module enable dashboard", True)
                n0de.ExecCommand("sudo ceph dashboard create-self-signed-cert", True)

                set_cred = str(create_file)
                set_cred = set_cred.replace("@@@LOC@@@", "~/cred")
                set_cred = set_cred.replace("@@@VARIABLE@@@", datacenter['ceph-cluster-pass'])
                n0de.ExecCommand("sudo %s" % set_cred, True)
                n0de.ExecCommand("sudo ceph dashboard ac-user-create admin -i ~/cred administrator", True)
                # n0de.ExecCommand("ssh %s sudo ceph dashboard ac-user-create admin '%s' administrator" %(monitor_node, datacenter['ceph-cluster-pass']))

                access_key = str(create_file)
                access_key = access_key.replace("@@@LOC@@@", "~/access_key")
                access_key = access_key.replace("@@@VARIABLE@@@", datacenter['rgw_access_key'])
                n0de.ExecCommand("sudo %s" % access_key, True)

                secret_key = str(create_file)
                secret_key = secret_key.replace("@@@LOC@@@", "~/secret_key")
                secret_key = secret_key.replace("@@@VARIABLE@@@", datacenter['rgw_secret_key'])
                n0de.ExecCommand("sudo %s" % secret_key, True)  

                n0de.ExecCommand("sudo ceph dashboard set-rgw-api-access-key -i ~/access_key", True)
                n0de.ExecCommand("sudo ceph dashboard set-rgw-api-secret-key -i ~/secret_key", True)
                n0de.ExecCommand("sudo ceph dashboard set-rgw-api-ssl-verify False", True)

                mon_once -= 1
        # if n['Server'] == "rgw":
        #     ssh_connect(n['ip_address'], datacenter['ceph-cluster-user'], datacenter['ceph-cluster-pass'])
        #     n0de = n['node_client']
        #     if rgw_once == 1:
                
        #         rgw_once -= 1
        #         break    


if UpDateConfigFileWhenFinished:
    print("updating original nodes.config.json with updated configurations")
    os.rename('nodes.config.json', 'nodes.config.json.old')
    with open('nodes.config.json', 'w') as the_file:
        the_file.write(json.dumps(config_backUp, indent=2))

